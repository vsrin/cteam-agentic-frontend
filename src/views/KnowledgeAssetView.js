import React, { useState, useEffect } from 'react';

function KnowledgeAssetView({ onCreateNew, onEdit, onBack }) {
  const [knowledgeBases, setKnowledgeBases] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  // Tooltip state
  const [hoveredAction, setHoveredAction] = useState(null);

  useEffect(() => {
    fetch('https://integration.enowclear360.com/api/knowledge-bases')
      .then(response => response.json())
      .then(data => setKnowledgeBases(data))
      .catch(error => console.error('Error fetching knowledge bases:', error));
  }, []);

  const filteredKnowledgeBases = knowledgeBases.filter(kb =>
    kb.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    kb.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleCreateClick = () => {
    if (onCreateNew) onCreateNew();
  };

  const handleEditClick = (kbId) => {
    const knowledgeBaseToEdit = knowledgeBases.find(kb => kb.id === kbId);
    if (onEdit) onEdit(knowledgeBaseToEdit);
  };

  const handleCloneClick = (kbId) => {
    const knowledgeBaseToClone = knowledgeBases.find(kb => kb.id === kbId);
    if (knowledgeBaseToClone && onEdit) {
      const clonedKnowledgeBase = {
        ...knowledgeBaseToClone,
        id: undefined,  // New ID will be generated by backend
        name: `CloneOf-${knowledgeBaseToClone.name}`,
        fileCount: 0
      };
      onEdit(clonedKnowledgeBase);
    }
  };

  const handleDeleteClick = (kbId) => {
    if (window.confirm(`Are you sure you want to delete knowledge base ${kbId}?`)) {
      fetch(`https://integration.enowclear360.com/api/knowledge-bases/${kbId}`, { method: 'DELETE' })
        .then(response => {
          if (response.ok) {
            setKnowledgeBases(knowledgeBases.filter(kb => kb.id !== kbId));
          } else {
            throw new Error('Failed to delete');
          }
        })
        .catch(error => console.error('Error deleting knowledge base:', error));
    }
  };

  const handleTestClick = (kbId) => {
    const knowledgeBaseToTest = knowledgeBases.find(kb => kb.id === kbId);
    if (knowledgeBaseToTest && onEdit) {
      const testKnowledgeBase = {
        ...knowledgeBaseToTest,
        isTestMode: true  // Add a flag to indicate test mode
      };
      onEdit(testKnowledgeBase);
    }
  };

  // Action button style for icons
  const actionButtonStyle = {
    background: 'none',
    border: 'none',
    color: '#4A5568', // Dark grey color
    padding: '0',
    margin: '0 0.5rem 0 0',
    cursor: 'pointer',
    fontSize: 'inherit',
    fontFamily: 'inherit',
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center'
  };

  // Tooltip style
  const tooltipStyle = {
    position: 'absolute',
    backgroundColor: '#333',
    color: 'white',
    padding: '4px 8px',
    borderRadius: '4px',
    fontSize: '12px',
    zIndex: 100,
    bottom: '100%',
    left: '50%',
    transform: 'translateX(-50%)',
    marginBottom: '5px',
    whiteSpace: 'nowrap'
  };

  return (
    <div className="knowledge-base-view" style={{ paddingLeft: '1rem' }}>
      <div className="page-header">
        <h1>Knowledge Assets</h1>
        <p>Manage your knowledge assets for use with AI agents</p>
      </div>

      <div className="page-actions">
        <button className="btn btn-primary" onClick={handleCreateClick} style={{ cursor: 'pointer' }}>
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginRight: '8px' }}>
            <path d="M8 3.33334V12.6667" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
            <path d="M3.33331 8H12.6666" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
          Create Knowledge Base
        </button>
      </div>

      <div className="filter-controls">
        <div className="search-box">
          <input
            type="text"
            className="form-control"
            placeholder="Search knowledge bases..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      <div className="table-container">
        <table className="table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Vector Store</th>
              <th>Embedding Model</th>
              <th>Files</th>
              <th>Last Updated</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredKnowledgeBases.map(kb => (
              <tr key={kb.id}>
                <td><div className="link-cell"><span>{kb.name}</span></div></td>
                <td>{kb.description}</td>
                <td>{kb.vectorStore}</td>
                <td>{kb.embeddingModel}</td>
                <td>{kb.fileCount}</td>
                <td>{kb.updatedAt}</td>
                <td>
                  <div style={{ display: 'flex', alignItems: 'center' }}>
                    {/* Edit Icon */}
                    <div style={{ position: 'relative', marginRight: '12px' }}>
                      <button
                        style={actionButtonStyle}
                        onClick={() => handleEditClick(kb.id)}
                        onMouseEnter={() => setHoveredAction(`edit-${kb.id}`)}
                        onMouseLeave={() => setHoveredAction(null)}
                        aria-label="Edit"
                      >
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M9.5 3H3.5C2.67157 3 2 3.67157 2 4.5V12.5C2 13.3284 2.67157 14 3.5 14H11.5C12.3284 14 13 13.3284 13 12.5V6.5L9.5 3Z"
                            stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M9.5 3V6.5H13" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                      </button>
                      {hoveredAction === `edit-${kb.id}` && (
                        <div style={tooltipStyle}>Edit</div>
                      )}
                    </div>

                    {/* Clone Icon */}
                    <div style={{ position: 'relative', marginRight: '12px' }}>
                      <button
                        style={actionButtonStyle}
                        onClick={() => handleCloneClick(kb.id)}
                        onMouseEnter={() => setHoveredAction(`clone-${kb.id}`)}
                        onMouseLeave={() => setHoveredAction(null)}
                        aria-label="Clone"
                      >
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <rect x="3" y="3" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <rect x="7" y="7" width="6" height="6" rx="1" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                      </button>
                      {hoveredAction === `clone-${kb.id}` && (
                        <div style={tooltipStyle}>Clone</div>
                      )}
                    </div>

                    {/* Test Icon */}
                    <div style={{ position: 'relative', marginRight: '12px' }}>
                      <button
                        style={actionButtonStyle}
                        onClick={() => handleTestClick(kb.id)}
                        onMouseEnter={() => setHoveredAction(`test-${kb.id}`)}
                        onMouseLeave={() => setHoveredAction(null)}
                        aria-label="Test"
                      >
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M13 8L3 8" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M9 4L13 8L9 12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                      </button>
                      {hoveredAction === `test-${kb.id}` && (
                        <div style={tooltipStyle}>Test</div>
                      )}
                    </div>

                    {/* Delete Icon */}
                    <div style={{ position: 'relative' }}>
                      <button
                        style={{ ...actionButtonStyle, color: '#E53E3E' }} // Red color for delete
                        onClick={() => handleDeleteClick(kb.id)}
                        onMouseEnter={() => setHoveredAction(`delete-${kb.id}`)}
                        onMouseLeave={() => setHoveredAction(null)}
                        aria-label="Delete"
                      >
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M2 4H14" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M5 4V3C5 2.44772 5.44772 2 6 2H10C10.5523 2 11 2.44772 11 3V4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M12 4V13C12 13.5523 11.5523 14 11 14H5C4.44772 14 4 13.5523 4 13V4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M6.5 7V11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                          <path d="M9.5 7V11" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                        </svg>
                      </button>
                      {hoveredAction === `delete-${kb.id}` && (
                        <div style={tooltipStyle}>Delete</div>
                      )}
                    </div>
                  </div>
                </td>
              </tr>
            ))}
            {filteredKnowledgeBases.length === 0 && (
              <tr>
                <td colSpan="7" style={{ textAlign: 'center', padding: '2rem' }}>
                  No knowledge bases found.
                  <button onClick={handleCreateClick} style={{ background: 'none', border: 'none', color: 'var(--accent-color)', textDecoration: 'underline', cursor: 'pointer', padding: '0 0.25rem' }}>
                    Create your first knowledge base
                  </button>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default KnowledgeAssetView;