name: Build and Deploy to Private EC2
on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: clear360/frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::867344440197:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Output image URI for next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via SSM
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy clear360/frontend:${{ github.sha }}" \
            --targets "Key=instanceIds,Values=i-03a39cacd0810289b" \
            --parameters 'commands=[
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker pull ${{ env.IMAGE_URI }}",
              "docker stop myapp || true",
              "docker rm myapp || true",
              "docker run -d --name myapp -p 80:3000 --restart unless-stopped ${{ env.IMAGE_URI }}"
            ]' \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "Waiting for deployment to complete..."
          while true; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id $COMMAND_ID \
              --region ${{ env.AWS_REGION }} \
              --query 'CommandInvocations[0].Status' \
              --output text)
            echo "Current status: $STATUS"

            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $(aws ssm list-command-invocations --command-id $COMMAND_ID --query 'CommandInvocations[0].InstanceId' --output text) \
                --region ${{ env.AWS_REGION }}
              exit 1
            fi

            sleep 10
          done
